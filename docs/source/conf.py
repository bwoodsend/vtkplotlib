#!/usr/bin/env python
#
# vtkplotlib documentation build configuration file, created by
# sphinx-quickstart on Fri Jun  9 13:47:02 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another
# directory, add these directories to sys.path here. If the directory is
# relative to the documentation root, use os.path.abspath to make it
# absolute, like shown here.
#
import os
import sys

sys.path.insert(0, os.path.abspath('../../'))

from pathlib import Path
from textwrap import indent

from sphinx.application import Sphinx

import vtkplotlib

# -- General configuration ---------------------------------------------------

project = 'vtkplotlib'
copyright = "2019-2021, Brénainn Woodsend"
author = "Brénainn Woodsend"

# The version info for the project you're documenting, acts as replacement
# for |version| and |release|, also used in various other places throughout
# the built documents.
#
# The short X.Y version.
version = vtkplotlib.__version__
# The full version, including alpha/beta/rc tags.
release = vtkplotlib.__version__

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.viewcode',
    'sphinx_copybutton',
    'm2r2',
    'sphinx_rtd_theme_configuration',
    'sphinx.ext.napoleon',
    'sphinx.ext.autosectionlabel',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# -- Globally defined substitutions to be used in rst files -----------------
with open("rst_prolog.txt") as f:
    rst_prolog = f.read()

# Build the changelog from per-release fragments.
histories = sorted(
    Path("../../history").resolve().glob("*.rst"),
    key=lambda x: tuple(map(int, x.stem.split("."))), reverse=True)

history = """\
=========
Changelog
=========

.. role:: red
    :class: in-red

Release history for `vtkplotlib`.
Breaking changes are :red:`highlighted in red`.

""" + "\n".join(f"v{i.stem}\n-{'-' * len(i.stem)}\n\n"
                f".. rst-class:: spacious\n\n"
                f"{indent(i.read_text(), '    ')}" for i in histories)

history_path = Path("history.rst")
if (not history_path.exists()) or history_path.read_text() != history:
    history_path.write_text(history)


def add_url(name, url):
    "Convenience way to create URLs."
    global rst_prolog
    rst_prolog += ".. _{}: {}\n".format(name, url)


for vtk_name in [
        'vtkActor', 'vtkActor2D', 'vtkArrowSource', 'vtkBMPReader',
        'vtkBMPWriter', 'vtkCellArray', 'vtkCommand', 'vtkCubeSource',
        'vtkCursor3D', 'vtkFollower', 'vtkImageData', 'vtkImageMapper',
        'vtkInteractorStyleImage', 'vtkInteractorStyleTrackballCamera',
        'vtkJPEGReader', 'vtkJPEGWriter', 'vtkLegendBoxActor', 'vtkLookupTable',
        'vtkMatrix4x4', 'vtkPNGReader', 'vtkPNGWriter', 'vtkPoints',
        'vtkPolyData', 'vtkPolyDataMapper', 'vtkPolyDataReader',
        'vtkPolyDataWriter', 'vtkRenderWindow', 'vtkRenderWindowInteractor',
        'vtkRenderer', 'vtkSTLReader', 'vtkScalarBarActor', 'vtkSphereSource',
        'vtkTIFFReader', 'vtkTIFFWriter', 'vtkTextActor', 'vtkTransform',
        'vtkVectorText', 'vtkWindowToImageFilter', 'vtkObject',
        'vtkInteractorStyle'
]:
    add_url(vtk_name,
            "https://vtk.org/doc/nightly/html/class%s.html#details" % vtk_name)

add_url("wxPython", "https://www.wxpython.org/")

# -- Add this file for Google search console ----------
html_extra_path = ["google77eb9775385691af.html"]

# --- Option for autosectionlabel --------
autosectionlabel_prefix_document = True

# -- Options for HTML output -------------------------------------------
# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.

import sphinx_rtd_theme

html_theme = "sphinx_rtd_theme"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['static']

# Other projects' website roots so that they can be cross referenced.
intersphinx_mapping = {
    'python': ('http://docs.python.org/3', None),
    'numpy': ('https://numpy.org/doc/stable/', None),
    'scipy': ('https://docs.scipy.org/doc/scipy/', None),
    'PyQt5': ('https://www.riverbankcomputing.com/static/Docs/PyQt5/', None),
    'wxPython': ('https://docs.wxpython.org/', None),
    'matplotib': ('https://matplotlib.org', None),
    'pillow': ('https://pillow.readthedocs.io/en/stable/', None),
}


def setup(app):
    # type: (Sphinx) -> None

    # PyQt5 has all its cross reference targets in a special :sip: domain which
    # needs to be registered to be used. Don't ask me how this works. It's
    # mostly guess work and copy/paste from sphinx.domains.c.CDomain.

    import sphinx.roles
    from sphinx.domains import Domain, ObjType, _

    class SIPDomain(Domain):
        name = "sip"
        label = "sip"
        object_types = {
            key: ObjType(_(key), key, 'data', 'identifier', 'type') for key in
            "attribute class enum member method module signal".split()
        }

    app.add_domain(SIPDomain)
    for key in SIPDomain.object_types:
        app.add_role_to_domain("sip", key, sphinx.roles.XRefRole())

    app.add_css_file('theme-overrides.css')


# Set the default interpretation of `foo` to :any:`foo`.
default_role = "any"
